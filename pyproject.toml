[tool.poetry]
name = "aura-security"
version = "2.2"
description = "Security auditing and static analysis for python"
authors = [
    "Martin Carnogursky <admin@sourcecode.ai>"
]
repository = "https://github.com/SourceCode-AI/aura"
homepage = "https://aura.sourcecode.ai/"
documentation = "https://docs.aura.sourcecode.ai/"
readme = "README.rst"
license = "GPL-3.0-or-later"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Security",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)"
]
packages = [
    { include = "aura" },
    { include = "tests", format = "sdist" }
]
include = [
    "README.rst",
    "LICENSE.txt",
    "aura/data/semantic_rules_schema.json",
    "aura/data/aura_config.yaml",
    "aura/data/rules.yara",
    "aura/data/signatures.yaml"
]

[tool.poetry.dependencies]
python = "^3.10"
packaging = "~20.9"
python-magic = "~0.4.24"
click = "~8.0"
colorama = "~0.4.4"
requests = "~2.27"
tqdm = "~4.62"
"ruamel.yaml" = "~0.17"
jinja2 = "~3.0"

# TODO: make the following dependencies optional
python-tlsh = "~3.17.0"
prettyprinter = "~0.18"
chardet = "~4.0"

# TODO: Extras, autodetect their presence in aura
jsonschema = { version = "~3.2", optional = true }
GitPython = { version = "~3.1", optional = true }
defusedxml = { version = "~0.7", optional = true }
tomli = { version = "~2.0", optional = true }
yara-python = {version = "~4.0.5", optional = true}
networkx = {version = "~2.6", optional = true}
python-rapidjson = { version = "~1.5", optional = true }
psycopg2 = { version = "~2.9", optional = true }
SQLAlchemy = { version = "~1.4", optional = true, extras = ["mypy"] }
xxhash = { version = "~2.0", optional = true }


[tool.poetry.extras]
full = ["yara-python", "networkx", "cssselect", "GitPython", "python-rapidjson", "defusedxml", "jsonschema", "tomli", "psycopg2", "xxhash", "SQLAlchemy"]

[tool.poetry.dev-dependencies]
responses = "^0.17"
tox = "~3.24"
pytest = "~6.2"
pytest-cov = "~3.0"
pytest-randomly = "~3.11"
sphinx = "~4.3"
sphinxcontrib-mermaid = "~0.7"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/SourceCode-AI/aura/issues"

[tool.poetry.scripts]
aura = "aura.cli:main"
apip = "aura.apip:main"

# Aura entry points for plugins
[tool.poetry.plugins."aura.uri_handlers"]
pypi = "aura.uri_handlers.pypi:PyPiHandler"
mirror = "aura.uri_handlers.mirror:MirrorHandler"
git = "aura.uri_handlers.git:GitRepoHandler"
local = "aura.uri_handlers.local:LocalFileHandler"

[tool.poetry.plugins."aura.ast_visitors"]
convert = "aura.analyzers.python.convert_ast:ASTVisitor"
rewrite = "aura.analyzers.python.rewrite_ast:ASTRewrite"
ast_pattern_matching = "aura.analyzers.python.pattern_matching_visitor:ASTPatternMatcherVisitor"
taint_analysis = "aura.analyzers.python.taint.visitor:TaintAnalysis"
readonly = "aura.analyzers.python.readonly:ReadOnlyAnalyzer"

[tool.poetry.plugins."aura.output_handlers"]
text = "aura.output.text:TextScanOutput"
sqlite = "aura.output.sqlite:SQLiteScanOutput"
json = "aura.output.json:JSONScanOutput"
gitlab-sast = "aura.output.gitlab:GitlabSASTOutput"
sarif = "aura.output.sarif:SARIFOutput"
sbom = "aura.output.sbom:SBOMOutput"
html = "aura.output.html:HTMLOutput"
postgres = "aura.output.postgres:PostgresScanOutput"

[tool.poetry.plugins."aura.diff_output_handlers"]
text = "aura.output.text:TextDiffOutput"
json = "aura.output.json:JSONDiffOutput"
sqlite = "aura.output.sqlite:SQLiteDiffOutput"

[tool.poetry.plugins."aura.info_output_handlers"]
text = "aura.output.text:TextInfoOutput"

[tool.poetry.plugins."aura.typosquatting_output_handlers"]
text = "aura.output.text:TextTyposquattingOutput"
json = "aura.output.json:JSONTyposquattingOutput"

[tool.poetry.plugins."aura.diff_hooks"]
diff_archive = "aura.analyzers.archive:diff_archive"

[tool.poetry.plugins."aura.input_hooks"]
typosquatting = "aura.analyzers.typosquatting:analyze"
package_enrichment = "aura.analyzers.package_enrichment:analyze"

[tool.poetry.plugins."aura.analyzers"]
file_analyzer = "aura.analyzers.fs_struct:analyze"
archive = "aura.analyzers.archive:archive_analyzer"
pyproject_toml = "aura.analyzers.pyproject:analyze_pyproject"
req_analyzer = "aura.analyzers.requirements_analyzer:analyze_requirements_file"
yara = "aura.analyzers.yara_scan:analyze"
xml = "aura.analyzers.xml:analyze"
pypirc = "aura.analyzers.pypirc:analyze"
python_dists = "aura.analyzers.dists:analyze"
setup_py = "aura.analyzers.setup:SetupPy"
data_finder = "aura.analyzers.data_finder:DataFinder"
string_finder = "aura.analyzers.data_finder:StringFinder"
jinja = "aura.analyzers.python.jinja:JinjaAnalyzer"
sqli = "aura.analyzers.python.sqli:SQLi"
misc = "aura.analyzers.python.misc:MiscAnalyzer"
crypto_gen_key = "aura.analyzers.python.crypto:CryptoGenKey"
secrets = "aura.analyzers.python.secrets:SecretsAnalyzer"
taint_analysis = "aura.analyzers.python.taint.base:TaintDetection"
stats = "aura.analyzers.stats:analyze"
non_ascii_characters = "aura.analyzers.python.unicode:NonAsciiCharacters"
# Post analysis hooks
directory_tree_stats = "aura.analyzers.stats:DirectoryTreeStats"
behavioral_analysis = "aura.analyzers.behavioral:BehavioralAnalysis"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"


[tool.pytest.ini_options]
addopts = "--strict-markers"
markers = [
    "e2e: marks tests with end-to-end behaviour, there are relativelly slow as they test a complete behaviour from executing the cli command to the finished results",
]

[tool.black]
line-length = 120
target-version = ["py38"]


[tool.mypy]
ignore_missing_imports = true
warn_unreachable = true
show_error_codes = true
disable_error_code = "import"
check_untyped_defs = true
